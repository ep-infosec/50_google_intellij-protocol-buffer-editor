# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{
  generate=[names="long" psi="yes" tokens="no"]

  parserClass="com.google.devtools.intellij.protoeditor.lang.parser.PbTextParser"
  parserUtilClass="com.google.devtools.intellij.protoeditor.lang.parser.PbParserUtil"
  parserImports=[
    "com.intellij.lang.parser.GeneratedParserUtilBase.Parser"
    "static com.google.devtools.intellij.protoeditor.lang.psi.ProtoTokenTypes.*"
  ]

  implements="com.google.devtools.intellij.protoeditor.lang.psi.PbTextElement"
  extends="com.google.devtools.intellij.protoeditor.lang.psi.impl.PbTextElementBase"

  psiClassPrefix="PbText"
  psiImplClassSuffix="Impl"
  psiPackage="com.google.devtools.intellij.protoeditor.lang.psi"
  psiImplPackage="com.google.devtools.intellij.protoeditor.lang.psi.impl"

  elementTypeHolderClass="com.google.devtools.intellij.protoeditor.lang.psi.PbTextTypes"
  elementTypeClass="com.google.devtools.intellij.protoeditor.lang.psi.PbTextElementType"

  # Allow parsing from any rule, maintaining compatibility with older GK versions.
  extraRoot("*")=true

  // The tokens listed below are defined in ProtoTokenTypes.java, and generated by the lexer in proto.flex.
  tokens=[
    // This token is only useful when using the Grammar-Kit plugin's "Live Preview" feature.
    TESTING_WHITESPACE = "regexp:[ \n\t\r\f]+"

    // Comments
    LINE_COMMENT = "regexp:#[^\n]*\n?"
    BLOCK_COMMENT = "regexp:(/\*([^*]|(\*+[^*/]))*(\*+/))"

    // Identifiers
    IDENTIFIER_LITERAL = "regexp:[a-zA-Z_][a-zA-Z0-9_]*"

    // A special token returned when an identifier appears directly after a number without a space.
    // This element type is not actually consumed by the parser; its existence will generate an
    // error.
    IDENTIFIER_AFTER_NUMBER = "IDENTIFIER_AFTER_NUMBER"

    // Numbers
    INTEGER_LITERAL = "regexp:(0|[1-9][0-9]*)|(0[xX][0-9a-fA-F]+)|(0[0-7]+)"
    FLOAT_LITERAL = "regexp:(\.[0-9]+|(0|[1-9][0-9]*)\.[0-9]*|(0|[1-9][0-9]*))([eE][-+]?[0-9]+)?[fF]?"

    // String literals
    STRING_LITERAL = "regexp:(\'(\\.|[^\'\n])*\')|(\"(\\.|[^\"\n])*\")"

    // Symbols
    COMMA = ','
    DOT = '.'
    GT = '>'
    LBRACE = '{'
    LBRACK = '['
    LT = '<'
    MINUS = '-'
    RBRACE = '}'
    RBRACK = ']'
    COLON = ':'
    SEMI = ';'
    SLASH = '/'

    // A catch-all for other types of symbols that might appear.
    SYMBOL = "regexp:[!#$%&()*+,-./:;<=>?@\[\\\]\^`{|}~]"
  ]
}

// The best reference for the text format is the official parser, which can be found at
// https://github.com/google/protobuf/blob/master/src/google/protobuf/text_format.cc.

// Root represents a standalone file, implemented by PbTextFile.
Root ::= RootMessageEntry*

private RootMessageEntry ::= !<<eof>> Field {
  pin = 1
  recoverWhile = RootMessageRecovery
}
private RootMessageRecovery ::= !FieldName

// Even though text format doesn't really have keywords, ProtoLexer may return them when embedded within a .proto file.
// So we need to use parseKeywordIdentifier to remap.
private Identifier ::= IDENTIFIER_LITERAL | <<parseKeywordIdentifier>>

// Identifier
IdentifierValue ::= Identifier {
  implements = [
    'com.google.devtools.intellij.protoeditor.lang.psi.PbTextLiteral'
    'com.google.devtools.intellij.protoeditor.lang.psi.ProtoIdentifierValue'
  ]
  mixin = 'com.google.devtools.intellij.protoeditor.lang.psi.impl.PbTextIdentifierValueMixin'
}

// Number literals
NumberValue ::= '-'? (INTEGER_LITERAL | FLOAT_LITERAL | "inf" | "infinity" | "nan") {
  implements = [
    'com.google.devtools.intellij.protoeditor.lang.psi.PbTextLiteral'
    'com.google.devtools.intellij.protoeditor.lang.psi.PbTextElement'
    'com.google.devtools.intellij.protoeditor.lang.psi.ProtoNumberValue'
    'com.google.devtools.intellij.protoeditor.lang.psi.ProtoBooleanValue'
  ]
  mixin = 'com.google.devtools.intellij.protoeditor.lang.psi.impl.PbTextNumberValueMixin'
}

// Strings
StringValue ::= StringPart+ {
  implements = [
    'com.google.devtools.intellij.protoeditor.lang.psi.PbTextLiteral'
    'com.google.devtools.intellij.protoeditor.lang.psi.PbTextElement'
    'com.google.devtools.intellij.protoeditor.lang.psi.ProtoStringValue'
  ]
  methods = [
    stringParts = 'StringPart'
  ]
}
StringPart ::= STRING_LITERAL {
  implements = [
    'com.google.devtools.intellij.protoeditor.lang.psi.PbTextElement'
    'com.google.devtools.intellij.protoeditor.lang.psi.ProtoStringPart'
  ]
}

// Qualified type names
SymbolPath ::= SymbolPathTuple | SymbolPathUnit
{
  implements = 'com.google.devtools.intellij.protoeditor.lang.psi.ProtoSymbolPath'
  mixin = 'com.google.devtools.intellij.protoeditor.lang.psi.impl.PbTextSymbolPathMixin'
}
SymbolPathTuple ::= SymbolPath '.' SymbolPathAtom { elementType = SymbolPath }
SymbolPathUnit ::= SymbolPathAtom { elementType = SymbolPath }
private SymbolPathAtom ::= Identifier

// A field
Field ::= FieldName ((':' Value) | (':'? (MessageValue | ValueList))) (';' | ',')? {
  implements = 'com.google.devtools.intellij.protoeditor.lang.psi.PbTextFieldBase'
  mixin = 'com.google.devtools.intellij.protoeditor.lang.psi.impl.PbTextFieldMixin'
  pin = 1
}

// Field name
FieldName ::= ExtensionName | Identifier {
  implements = [
    'com.google.devtools.intellij.protoeditor.lang.psi.PbTextFieldNameBase'
    'com.google.devtools.intellij.protoeditor.lang.psi.EffectiveReferenceOwner'
  ]
  mixin = 'com.google.devtools.intellij.protoeditor.lang.psi.impl.PbTextFieldNameMixin'
  methods = [
    nameIdentifier = 'IDENTIFIER_LITERAL'
  ]
}
ExtensionName ::= '[' (Domain '/')? SymbolPath ']' {
  pin = 1
  implements = [
    'com.google.devtools.intellij.protoeditor.lang.psi.PbTextExtensionNameBase'
    'com.google.devtools.intellij.protoeditor.lang.psi.EffectiveReferenceOwner'
    'com.google.devtools.intellij.protoeditor.lang.psi.ProtoSymbolPathContainer'
  ]
  mixin = 'com.google.devtools.intellij.protoeditor.lang.psi.impl.PbTextExtensionNameMixin'
}
Domain ::= Identifier ('.' Identifier)* {
  implements = 'com.google.devtools.intellij.protoeditor.lang.psi.PbTextDomainBase'
}

// Field value
private Value ::= IdentifierValue | NumberValue | StringValue
ValueList ::= '[' ValueListInner? ']' {
  pin = 1
  implements = 'com.google.devtools.intellij.protoeditor.lang.psi.ProtoBlockBody'
  methods = [
    start = 'LBRACK'
    end = 'RBRACK'
  ]
}
private ValueListInner ::= !']' ValueOrMessage (!']' ',' ValueOrMessage)* {
  // The ".*" causes pins to be set on both the first "!']'" and the second "!']'" within the
  // repeated group. The result is that we can recover from an invalid ValueOrMessage rule and parse
  // the next rule in the list.
  pin(".*") = 1
}
private ValueOrMessage ::= Value | MessageValue

// Message value
MessageValue ::= BraceMessage | PointyMessage {
  implements = [
    'com.google.devtools.intellij.protoeditor.lang.psi.PbTextMessage'
    'com.google.devtools.intellij.protoeditor.lang.psi.ProtoBlockBody'
  ]
  mixin = 'com.google.devtools.intellij.protoeditor.lang.psi.impl.PbTextMessageValueMixin'
  methods = [
    fields = 'Field'
  ]
}
private BraceMessage ::= '{' BraceMessageEntry* '}' { pin = 1 }
private BraceMessageEntry ::= !'}' Field {
  // Pin to anything that's not the closing brace, so that we can recover in the case that an item
  // is invalid. Without this pin, specifying an invalid field in a message would break parsing of
  // all subsequent fields in the same message. See for more discussion:
  // https://github.com/JetBrains/Grammar-Kit/issues/128#issuecomment-236204070
  pin = 1
  recoverWhile = MessageRecovery
}
private PointyMessage ::= '<' PointyMessageEntry* '>' { pin = 1 }
private PointyMessageEntry ::= !'>' Field {
  pin = 1
  recoverWhile = MessageRecovery
}
private MessageRecovery ::= !(FieldName | '}' | '>')
